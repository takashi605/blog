name: "Chart および ContainerImage の build と push"

on:
  push:
    tags:
      - "v*"

jobs:
  # まずは共通の準備ジョブ
  prepare:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_VERSION: ${{ steps.get_version.outputs.IMAGE_VERSION }}
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0 # タグを正しく取得するためにすべてのコミットを取得できるようにする

      - name: "push されたタグが main ブランチに存在していれば実行"
        run: |
          BRANCHES=$(git branch --contains ${{ github.ref_name }})
          set -- $BRANCHES
          for BRANCH in $BRANCHES ; do
            if [[ "$BRANCH" == "main" ]]; then
              exit 0
            fi
          done
          exit 1

      - name: "git の最新タグを出力としてセット"
        id: get_version
        run: |
          VERSION=$(git describe --tags --always)
          echo "IMAGE_VERSION=$VERSION" >> $GITHUB_OUTPUT

  # 以下、それぞれのイメージの Build & Push を並列化

  push_web_image:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "buildx のセットアップ"
        uses: docker/setup-buildx-action@v3

      - name: "ghcr.io へのログイン"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "web Image の Build と Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/frontend/web/Dockerfile
          target: prod
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-web:${{ needs.prepare.outputs.IMAGE_VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-web:cache,mode=max
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-web:cache
          build-args: |
            NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}
            NEXT_PUBLIC_CLOUDINARY_API_KEY=${{ secrets.NEXT_PUBLIC_CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            NEXT_PUBLIC_BASIC_AUTHENTICATION=${{ secrets.NEXT_PUBLIC_BASIC_AUTHENTICATION }}

  push_api_image_prod:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "buildx のセットアップ"
        uses: docker/setup-buildx-action@v3

      - name: "ghcr.io へのログイン"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "本番用 api Image の Build と Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/backend/api/Dockerfile
          target: prod
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-api:${{ needs.prepare.outputs.IMAGE_VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-api:cache,mode=max
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-api:cache

  push_api_image_staging:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "buildx のセットアップ"
        uses: docker/setup-buildx-action@v3

      - name: "ghcr.io へのログイン"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "ステージング用 api Image の Build と Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/backend/api/Dockerfile
          target: staging
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-api-staging:${{ needs.prepare.outputs.IMAGE_VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-api-staging:cache,mode=max
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-api-staging:cache

  push_postgres_image:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "buildx のセットアップ"
        uses: docker/setup-buildx-action@v3

      - name: "ghcr.io へのログイン"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "postgres Image の Build と Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/db/postgres/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-postgres:${{ needs.prepare.outputs.IMAGE_VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-postgres:cache,mode=max
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-postgres:cache

  push_admin_image_prod:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "buildx のセットアップ"
        uses: docker/setup-buildx-action@v3

      - name: "ghcr.io へのログイン"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "本番用 admin Image の Build と Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/frontend/blog-admin/Dockerfile
          target: prod
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-blog-admin:${{ needs.prepare.outputs.IMAGE_VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-blog-admin:cache,mode=max
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-blog-admin:cache
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PROD }}
            NEXT_PUBLIC_WEB_URL=${{ secrets.NEXT_PUBLIC_WEB_URL_PROD }}
            NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}
            NEXT_PUBLIC_CLOUDINARY_API_KEY=${{ secrets.NEXT_PUBLIC_CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}

  push_admin_image_staging:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "buildx のセットアップ"
        uses: docker/setup-buildx-action@v3

      - name: "ghcr.io へのログイン"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "ステージング用 admin Image の Build と Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/frontend/blog-admin/Dockerfile
          target: prod # build-args のみの違いなので、target は prod で問題なし
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-blog-admin-staging:${{ needs.prepare.outputs.IMAGE_VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-blog-admin-staging:cache,mode=max
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-blog-admin-staging:cache
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_STAGING }}
            NEXT_PUBLIC_WEB_URL=${{ secrets.NEXT_PUBLIC_WEB_URL_STAGING }}
            NEXT_PUBLIC_BASIC_AUTHENTICATION=${{ secrets.NEXT_PUBLIC_BASIC_AUTHENTICATION }}
            NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}
            NEXT_PUBLIC_CLOUDINARY_API_KEY=${{ secrets.NEXT_PUBLIC_CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}

  push_e2e_image:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "buildx のセットアップ"
        uses: docker/setup-buildx-action@v3

      - name: "ghcr.io へのログイン"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "e2e Image の Build と Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/frontend/e2e/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-e2e:${{ needs.prepare.outputs.IMAGE_VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-e2e:cache,mode=max
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-e2e:cache

  push_api_test_image:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "buildx のセットアップ"
        uses: docker/setup-buildx-action@v3

      - name: "ghcr.io へのログイン"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "api-test Image の Build と Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/backend/api-test/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-api-test:${{ needs.prepare.outputs.IMAGE_VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-api-test:cache,mode=max
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-api-test:cache

  # Chart のパッケージ・Push
  push_chart_package:
    runs-on: ubuntu-latest
    needs: [prepare]
    permissions:
      contents: read
      packages: write
    steps:
      - name: "リポジトリのチェックアウト"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: "Helm のセットアップ"
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.13.3

      - name: "Helm Chart のパッケージング"
        run: |
          helm package ${{ github.workspace }}/k8s/blog-chart --version ${{ needs.prepare.outputs.IMAGE_VERSION }}

      - name: "GHCR へのログイン"
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: "Helm Chart の Push"
        run: |
          CHART_NAME=$(basename *.tgz .tgz)
          helm push ${CHART_NAME}.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
